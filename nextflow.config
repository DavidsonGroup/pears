/* This is the configuration file, here you can adjust parameters and executors. */

/* pears requires:
 * 		- reads: zipped (.fastq.gz) and formatted according to cellranger naming convention 
 *			([Sample Name]_S1_L00[Lane Number]_[Read Type]_001.fastq.gz)
 * 			 You will need to specify the length of the cell barcode and unique molecular identifier
 * 		- reference genome: unzipped
 *		- list of known fusion (shr_ouput): output from JAFFA can be directly piped pears or in the 
 *			format of the example.csv file
 * or you can direct pears to each individual input file:
 * 		- reads = "/path/to/reads/"
 *		- reference = "/path/to/reference/"
 *			- if you have pre-generated .fasta or gene.gtf files, ref_fasta and ref_gene
 *			  can be changed.
 * you will also need to indicate an output directory:
 * 		- out_dir = "/path/to/output_directory/"
*/

params {
       	reads = "${projectDir}"
	read1 = "${reads}/demo/*_1.fastq"
	read2 = "${reads}/demo/*_2.fastq"
	known_list = "${reads}/demo/short_input.csv"
	reference = "${projectDir}/ref/"
	ref_fasta = "${reference}/hg38.fa"
	ref_gene = "${reference}/gencode.v44.basic.annotation.gtf"
	out_dir = "/vast/projects/lab_davidson/davidson.n/20240110_Pears/pears/out"	
	R2_length = 91
	cellbarcode_len = 16
	umi_len = 12

        aligned_file = ""
        fuscia_mapqual = 30
        fuscia_up = 1000
        fuscia_down = 1000
        flexi_searchlen = 20

	barcode_whitelist = "$projectDir/modules/barcodes/"
	genome_version = "GRCh38+GENCODE44"
	
	align = true
        masterdata = true

}

//align = true - runs cellranger
//masterdata = true - file does not exists

//adjustable parameters
/* fuscia_mapqual: minimum mapping quality of reads fuscia will look through
 * fuscia_up/fuscia_down: if there is no gene annotation, you can specify a range (bp) upstream/downstream 
 *			  of the fusion breakpoint
 * flexiplex_searchlen: 2x the length of sequence (bp) flexiplex will use to look for the fusion sequence. 
 * 			Please note, the longer the sequence, the longer flexiplex will take to run. 
 * 			See **Davidson et al. (2023) 
*/

/* Executors **TODO: currently only available on slurm** */
process {
	executor = 'slurm'
	memory = '8 GB'
	cpus = 4
	container = 'user/image'
}

//conda env
conda.enabled = true
